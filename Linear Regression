#Task 1 - Have a look at the dataset
# import packages
import pandas as pd
import numpy as np


# Code starts here

# read data
train = pd.read_csv(path_ames_train)
test = pd.read_csv(path_ames_test)

# split into features and target
from sklearn.model_selection import train_test_split

X_train, y_train = train.iloc[:,:7], train.iloc[:,7]
X_test, y_test = test.iloc[:,:7], test.iloc[:,7]


# display first five rows of training features and target
print(X_train, y_train)
print(X_test, y_test)

# Codex ends her

#Task 2 - Find regression co-efficients for `GarageArea` using OLS
# import packages
import matplotlib.pyplot as plt


# Code starts here

def estimate_coef(x, y):
    # number of observations/points
    n = np.size(x)
    # mean of x and y vector
    m_x = np.mean(x)
    m_y = np.mean(y)
 
    # calculating cross-deviation and deviation about x
    SS_xy = np.sum(y*x) - n*m_y*m_x
    SS_xx = np.sum(x*x) - n*m_x*m_x
   
 
    # calculating regression coefficients
    b_1 = SS_xy / SS_xx
    b_0 = m_y - b_1*m_x
    print(b_0, b_1)
 
    return (b_0, b_1)

def plot_regression_line(x, y, b):
    # plotting the actual points as scatter plot
    plt.scatter(x, y, color = "m",marker = "o", s = 30)
 
    # predicted response vector
    y_pred = b[0] + b[1]*x

    # plotting the regression line
    plt.plot(x, y_pred, color = "g")
 
    # putting labels
    plt.xlabel('x')
    plt.ylabel('y')
   
    # function to show plot
    plt.show()

# Visualize your results
values = estimate_coef(X_train['GarageArea'], y_train)
plot_regression_line(X_train['GarageArea'], y_train, values)
# Code ends here




#Task 3 - Predict `SalePrice` with scikit-learn
# import packages
from sklearn.linear_model import LinearRegression 

# Code starts here

# instantiate linear model
linreg = LinearRegression()

# fit model on training data
linreg.fit(X_train, np.log(y_train))

# predict on test features
y_pred = linreg.predict(X_test)

# display predictions
print(y_pred)

# Code ends here

#Task 4 - Calculate MAE
# import packages
from sklearn.metrics import mean_absolute_error

# Code starts here

# MAE calculation
mae = mean_absolute_error(y_test, np.exp(y_pred))
print(mae)
# Code ends here

#Task 5 - Calculate RMSE
# import packages
from sklearn.metrics import mean_squared_error
import math
# Code starts here
rmse = np.sqrt(mean_squared_error(y_test, np.exp(y_pred)))
print(rmse)

# Code ends here

